import java.util.zip.ZipFile
import org.apache.tools.ant.taskdefs.condition.Os


plugins {
    id 'com.android.application'
    id 'net.nemerosa.versioning' version '2.15.1'
}

def smaliFolder = projectDir.toPath().resolve("../smali").normalize()
def scriptsFolder = projectDir.toPath().resolve("../scripts").normalize()

versionFile {
    file = projectDir.toPath().resolve("src/main/assets/version.properties").toFile()
}

task cleanVersionFile {
    projectDir.toPath().resolve("src/main/assets/version.properties").toFile().delete()
}

task exportDex {
    doLast {
        File moduleDir = projectDir
        try {
            ZipFile file = new ZipFile(moduleDir.getAbsolutePath() + "/build/outputs/apk/release/app-release-unsigned.apk");
            var out = moduleDir.getAbsoluteFile().toPath();
            file.getInputStream(file.getEntry("classes.dex")).transferTo(out.resolve("classes6.dex").toFile().newOutputStream())
            file.getInputStream(file.getEntry("classes2.dex")).transferTo(out.resolve("classes7.dex").toFile().newOutputStream())
            file.getInputStream(file.getEntry("assets/version.properties")).transferTo(out.resolve("version.properties").toFile().newOutputStream())
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

android {
    compileSdk 33

    sourceSets {
        main {
            java.srcDirs += 'build/generated/aidl_source_output_dir/release/out'
        }
    }

    defaultConfig {
        applicationId "ru.vtosters.lite.utils.lite"
        minSdk 22
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    namespace 'ru.vtosters.lite'
    ndkVersion '25.1.8937393'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'net.sourceforge.streamsupport:streamsupport-minifuture:1.7.4'
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    implementation(project(':native-effects'))
}

task prepareDexForMerge(type: Copy) {
    dependsOn('exportDex')
    into smaliFolder.toString()
    from(projectDir) {
        include 'classes6.dex'
        include 'classes7.dex'
    }
    from(projectDir) {
        include 'version.properties'
        into 'assets'
    }
    // TODO
    doLast {
        new File(projectDir, "classes6.dex").delete()
        new File(projectDir, "classes7.dex").delete()
        new File(projectDir, "version.properties").delete()
    }
}

task buildVTL(type: Exec) {
    dependsOn('prepareDexForMerge')
    workingDir(projectDir.parentFile)
    if (Os.isFamily("unix") || Os.isFamily("mac")) {
        commandLine 'bash', '-c', './scripts/build.sh'
    } else {
        commandLine 'cmd', '/C', '.\\scripts\\build.bat'
    }
}

task buildAndInstallVTL(type: Exec) {
    dependsOn('buildVTL')
    workingDir(scriptsFolder.toString())
    ignoreExitValue true
    if (Os.isFamily("unix") || Os.isFamily("mac")) {
        commandLine 'bash', '-c', 'adb install VTLite.apk'
    } else {
        commandLine 'adb', 'install', 'VTLite.apk'
    }
}

exportDex.dependsOn('assembleRelease')
clean.dependsOn('cleanVersionFile')
versionFile.dependsOn('cleanVersionFile')
preBuild.dependsOn('versionFile')
