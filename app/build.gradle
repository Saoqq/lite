import java.nio.file.Files
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream
import org.apache.tools.ant.taskdefs.condition.Os


plugins {
    id 'com.android.application'
    id 'net.nemerosa.versioning' version '2.15.1'
    id 'org.mozilla.rust-android-gradle.rust-android'
}

cargo {
    profile = 'release'
    module = '../native-effects'
    libname = 'native-effects'
    targets = ["arm", "arm64"]
    prebuiltToolchains = true
    pythonCommand = "python3"
}

def smaliFolder = projectDir.toPath().resolve("../smali").normalize()
def scriptsFolder = projectDir.toPath().resolve("../scripts").normalize()

versionFile {
    file = projectDir.toPath().resolve("src/main/assets/version.properties").toFile()
}

task cleanVersionFile {
    projectDir.toPath().resolve("src/main/assets/version.properties").toFile().delete()
}

task exportDex {
    doLast {
        try {
            File moduleDir = projectDir
            ZipInputStream inputStream = new ZipInputStream(new FileInputStream(moduleDir.getAbsolutePath() + "/build/outputs/apk/release/app-release-unsigned.apk"))
            ZipFile file = new ZipFile(moduleDir.getAbsolutePath() + "/build/outputs/apk/release/app-release-unsigned.apk");
            ZipEntry entry
            while ((entry = inputStream.nextEntry) != null) {
                if (entry.getName().equals("classes.dex")) {
                    print('classes.dex found!')

                    FileOutputStream output = new FileOutputStream(new File(moduleDir.getAbsoluteFile(), "classes6.dex"))

                    byte[] buffer = new byte[1024]
                    int len = 0
                    while ((len = inputStream.read(buffer)) > 0) {
                        output.write(buffer, 0, len)
                    }
                    output.close()
                }
                if (entry.getName().equals("classes2.dex")) {
                    print('\nclasses2.dex found!')

                    FileOutputStream output = new FileOutputStream(new File(moduleDir.getAbsoluteFile(), "classes7.dex"))

                    byte[] buffer = new byte[1024]
                    int len = 0
                    while ((len = inputStream.read(buffer)) > 0) {
                        output.write(buffer, 0, len)
                    }
                    output.close()
                }
            }

            for (ZipEntry e : Collections.list(file.entries())) {
                if (e.getName().endsWith("assets/version.properties")) {
                    var is = file.getInputStream(e)
                    FileOutputStream output = new FileOutputStream(new File(moduleDir.getAbsoluteFile(), "version.properties"))

                    byte[] buffer = new byte[1024]
                    int len = 0
                    while ((len = is.read(buffer)) > 0) {
                        output.write(buffer, 0, len)
                    }
                    output.close()

                    print('\nversion.properties found!')
                }
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

android {
    compileSdkVersion 32
    buildToolsVersion '33.0.0'

    defaultConfig {
        applicationId "ru.vtosters.lite.utils.lite"
        minSdk 22
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    namespace 'ru.vtosters.lite'
    ndkVersion '25.1.8937393'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'net.sourceforge.streamsupport:streamsupport-minifuture:1.7.4'
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
}

task prepareDexForMerge(type: Copy) {
    dependsOn('exportDex')
    dependsOn('cargoBuild')
    into smaliFolder.toString()
    from(projectDir) {
        include 'classes*.dex'
    }
    from(projectDir) {
        include 'version.properties'
        into 'assets'
    }
    from('../native-effects/target/aarch64-linux-android/release'){
        include 'libnative_effects.so'
        into 'lib/arm64-v8a'
    }
    from('../native-effects/target/armv7-linux-androideabi/release'){
        include 'libnative_effects.so'
        into 'lib/armeabi-v7a'
    }
    doLast {
        Files.newDirectoryStream(projectDir.toPath(), "classes*.dex").forEach { it.toFile().delete() }
        new File(projectDir, "version.properties").delete()
    }
}

task buildVTL(type: Exec) {
    dependsOn('prepareDexForMerge')
    workingDir(projectDir.parentFile)
    if (Os.isFamily("unix") || Os.isFamily("mac")) {
        commandLine 'bash', '-c', './scripts/build.sh'
    } else {
        commandLine 'cmd', '/C', '.\\scripts\\build.bat'
    }
}

task buildAndInstallVTL(type: Exec) {
    dependsOn('buildVTL')
    workingDir(scriptsFolder.toString())
    ignoreExitValue true
    if (Os.isFamily("unix") || Os.isFamily("mac")) {
        commandLine 'bash', '-c', 'adb install VTLite.apk'
    } else {
        commandLine 'adb', 'install', 'VTLite.apk'
    }
}

exportDex.dependsOn('assembleRelease')
clean.dependsOn('cleanVersionFile')
versionFile.dependsOn('cleanVersionFile')
preBuild.dependsOn('versionFile')
